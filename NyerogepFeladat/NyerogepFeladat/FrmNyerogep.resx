<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>